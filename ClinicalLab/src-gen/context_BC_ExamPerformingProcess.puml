@startuml

skinparam componentStyle uml2

package "'Person' Aggregate" <<Rectangle>> {
	class Person <<(A,#fffab8) Aggregate Root>> {
		String name
		Date birthDate
		PersonId id
		Cpf cpf
		Email contactEmail
	}
	class PersonId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
	class Cpf <<(V,DarkSeaGreen) Value Object>> {
		String cpf
	}
	class Email <<(V,DarkSeaGreen) Value Object>> {
		String emailText
	}
}
package "'Client' Aggregate" <<Rectangle>> {
	class Client <<(A,#fffab8) Aggregate Root>> {
		ClientId id
	}
	class ClientId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
}
package "'Attendant' Aggregate" <<Rectangle>> {
	class Attendant <<(A,#fffab8) Aggregate Root>> {
		String password
		AttendantId id
	}
	class AttendantId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
}
package "'ServiceNumber' Aggregate" <<Rectangle>> {
	class ServiceNumber <<(A,#fffab8) Aggregate Root>> {
		String number
		boolean isPriority
		String status
		ServiceNumberId id
	}
	class ServiceNumberId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
}
package "'ExamRequest' Aggregate" <<Rectangle>> {
	class ExamRequest <<(A,#fffab8) Aggregate Root>> {
		Date requestDate
		Double totalPrice
		String paymentMethod
		String status
		ExamRequestId id
		ClientId clientId
		List<ExamTestId> examTestList
	}
	class ExamRequestId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
}
package "'ExamTest' Aggregate" <<Rectangle>> {
	class ExamTest <<(A,#fffab8) Aggregate Root>> {
		ExamTestId id
		ExamId examId
		TestResultId[0..1] testResultId
	}
	class ExamTestId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
}
package "'Exam' Aggregate" <<Rectangle>> {
	class Exam <<(A,#fffab8) Aggregate Root>> {
		String name
		String requirements
		Double price
		int analysisTime
		ExamId id
	}
	class ExamId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
}
package "'TestResult' Aggregate" <<Rectangle>> {
	class TestResult <<(A,#fffab8) Aggregate Root>> {
		Date resultDate
		String resultContent
		TestResultId id
	}
	class TestResultId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
}
package "'ClientService' Aggregate" <<Rectangle>> {
	class ClientService <<(A,#fffab8) Aggregate Root>> {
		String status
		ClientServiceId id
		ServiceNumberId serviceNumberId
		ExamRequestId[0..1] examRequestId
		BloodDrawStatus bloodDrawStatus
	}
	class ClientServiceId <<(V,DarkSeaGreen) Value Object>> {
		int id
	}
	class BloodDrawStatus <<(V,DarkSeaGreen) Value Object>> {
		boolean isWaiting
		int positionQueue
	}
}
ExamTest --> ExamTestId : id
ExamRequest "1" o--> "*" ExamTestId : examTestList
ExamTest --> ExamId : examId
Person --> PersonId : id
ServiceNumber --> ServiceNumberId : id
Person --> Cpf : cpf
Client --> ClientId : id
ExamTest "1" --> "0..1" TestResultId : testResultId
ClientService "1" --> "0..1" ExamRequestId : examRequestId
Person --> Email : contactEmail
ClientService --> ServiceNumberId : serviceNumberId
Exam --> ExamId : id
ClientService --> BloodDrawStatus : bloodDrawStatus
ExamRequest --> ClientId : clientId
Attendant --> AttendantId : id
ExamRequest --> ExamRequestId : id
ClientService --> ClientServiceId : id
TestResult --> TestResultId : id
Client --|> Person
Attendant --|> Person
legend left
  This bounded context implements the subdomain 'ExamPerformingProcess'.
end legend


@enduml
